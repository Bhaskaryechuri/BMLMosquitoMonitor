#:import time time
#:import sleep time.sleep 
#:import PiCamera picamera.PiCamera 
#:import strftime time.strftime

<BackgroundColor@Widget>
    background_color: 1, 1, 1, 1
    canvas.before:
        Color:
            rgba: root.background_color
        Rectangle:
            size: self.size
            pos: self.pos

<BackgroundLabel@Label+BackgroundColor>
    background_color: 0, 0, 0, 1
    # Default the background color for this label
    # to r 0, g 0, b 0, a 0

<BackgroundToggleButton@ToggleButton+BackgroundColor>
    background_color: 0, 0, 0, 1

<BackgroundSlider@Slider+BackgroundColor>
    background_color: 0, 0, 0, 1
    
<BackgroundFileChooserIconView@FileChooserIconView+BackgroundColor>
    canvas.before:
        Color:
            rgba: 1,1,1,1
        Rectangle:
            size: self.size
            pos: self.pos
    background_color: 1, 1, 1, 1
    opacity: 1
    

#the outermost window
<ContainerFloat>:
    
    BoxLayout:
        orientation: 'vertical'    
        
        #control panel
        PageLayout:
            
                               
            #white LED control 
            BoxLayout:
                orientation: 'vertical'
                
                BackgroundLabel:
                    text: 'LED Control Panel'
                    background_color: 1, 0, 0, 1

                ToggleButton:
                    id: led1_button
                    text: 'LED Set 1'
                    on_state:
                        print("on") if led1_button.state == "down" else print("off")
                        root.LED1_on() if led1_button.state == "down" else root.LED1_off()
                        print("additional message")
                        
                ToggleButton:
                    id: led2_button
                    text: 'LED Set 2'
                    on_state:
                        print("on") if led2_button.state == "down" else print("off")
                        root.LED2_on() if led2_button.state == "down" else root.LED2_off()
                        print("additional message")
                        
                ToggleButton:
                    id: led3_button
                    text: 'LED Set 3'
                    on_state:
                        print("on") if led3_button.state == "down" else print("off")
                        root.LED3_on() if led3_button.state == "down" else root.LED3_off()
                        print("additional message")
                        
                ToggleButton:
                    text: 'LED Set 4'
                ToggleButton:
                    text: 'LED Set 5'
                ToggleButton:
                    text: 'LED Set 6'
     

            #camera controls
            BoxLayout:
                orientation: 'vertical'
                
                BackgroundLabel:
                    text: 'Camera Settings'
                    size_hint_y: 2.7
                    background_color: 0, 0, 1, 1
                
                ToggleButton:
                    id: preview_button
                    text: 'Camera Preview'
                    size_hint_y: 2
                    on_state:
                        print("preview on") if preview_button.state == "down" else print("preview off")
                        root.preview_on() if preview_button.state == "down" else root.preview_off()
                        print(str(brightness.value) + " is the brightness value")
                
                BackgroundSlider:
                    id: brightness
                    min: 0
                    max: 100
                    step: 1
                    value: 50
                    orientation: 'horizontal'
                    on_value: 
                        print("Brightness has been set to: ", str(brightness.value))
                        root.set_brightness(brightness.value)

                BackgroundLabel:
                    text: "Brightness: " + str(brightness.value)
                    
                BackgroundSlider:
                    id: iso
                    min: 0
                    max: 800
                    step: 100
                    value: 0
                    orientation: 'horizontal'
                    on_value: 
                        print("ISO has been set to: ", str(iso.value))
                        root.set_iso(iso.value)
                    
                BackgroundLabel:
                    text: "ISO (0 = auto): " + str(iso.value)
                
                BackgroundSlider:
                    id: contrast
                    min: -100
                    max: 100
                    value: 0
                    step: 1
                    orientation: 'horizontal'
                    on_value: 
                        print("Contrast has been set to: ", str(contrast.value))
                        root.set_contrast(contrast.value)
                    
                BackgroundLabel:
                    text: "Contrast: " + str(contrast.value)
                    
                BackgroundSlider:
                    id: exposure_compensation
                    min: -25
                    max: 25
                    value: 0
                    step: 1
                    orientation: 'horizontal'
                    on_value: 
                        print("Exposure Compensation has been set to: ", str(exposure_compensation.value))
                        root.set_exposure_compensation(exposure_compensation.value)
                    
                BackgroundLabel:
                    text: "Exposure Compensation: " + str(exposure_compensation.value)
                
                BackgroundSlider:
                    id: saturation
                    min: -100
                    max: 100
                    step: 1
                    value: 0
                    orientation: 'horizontal'
                    on_value: 
                        print("Saturation has been set to: ", str(saturation.value))
                        root.set_saturation(saturation.value)
                        
                BackgroundLabel:
                    text: "Saturation: " + str(saturation.value)
                    
                BackgroundSlider:
                    id: sharpness
                    min: -100
                    max: 100
                    step: 1
                    value: 0
                    orientation: 'horizontal'
                    on_value: 
                        print("Sharpness has been set to: ", str(sharpness.value))
                        root.set_sharpness(sharpness.value)
                    
                BackgroundLabel:
                    text: "Sharpness: " + str(sharpness.value)
                
                
                #ToggleButton:
                 #   id: record_button
                  #  text: 'Start Recording'
                   # size_hint_y: 2
                    #on_state:
                     #   print("record on") if record_button.state == "down" else print("record off")
                      #  root.record_on() if record_button.state == "down" else root.record_off()

            #ir LED control 
            BoxLayout:
                orientation: 'vertical'
    
                BackgroundLabel:
                    text: 'IR LED Settings'

                BackgroundLabel:
                    text: 'Output Folder: ' + filechooser.path
                
                BackgroundFileChooserIconView:
                    id: filechooser
                    path: "/home/pi/Desktop/"

                BoxLayout:
                    orientation: 'vertical'

                    BackgroundLabel:
                        text: 'Image Capture Mode:'

                    BoxLayout:
                        orientation: 'horizontal'

                        ToggleButton:
                            id: manual
                            group: 'mode'
                            text: 'Manual Recording'
                            state: 'down'
                        ToggleButton:
                            id: timed
                            group: 'mode'
                            text: 'Timed Recording'
                        ToggleButton:
                            id: timelapse
                            group: 'mode'
                            text: 'Timelapse Photography'
                
                BoxLayout:
                    orientation: 'horizontal'

                    BackgroundLabel:
                        text: 'Timed Recording Duration (mins)'

                    TextInput:
                        id: timed_duration
                        text: '0.25'
                        disabled: False

                BoxLayout:
                    orientation: 'horizontal'

                    BackgroundLabel:
                        text: 'Timelapse Photo Frequency (sec)'

                    TextInput:
                        id: tl_frequency
                        text: '5'
                        size_hint_x: None
                        width: 100
                        size_hint_y: 1
                        height: 50
                        multiline: False
                        disabled: False

                    BackgroundLabel:
                        text: 'Timelapse Duration (mins)'

                    TextInput:
                        id: tl_duration
                        text: '0.25'
                        size_hint_x: None
                        size_hint_y: 1
                        height: 50
                        width: 100
                        multiline: False
                        disabled: False

                Button:
                    text: 'Start/Stop Recording -testing'
                    id: record_button
                    size_hint_y: 2
                    on_release:
                        print("manual record toggle") if (manual.state == "down") else ""
                        root.record_toggle(filechooser.path) if (manual.state == "down") else ""
                        
                        print("timed record on") if timed.state == "down" else ""
                        root.timed_record_on(timed_duration.text, filechooser.path) if timed.state == "down" else ""
                        
                        print("timelapse on") if timelapse.state == "down" else ""
                        root.timelapse_on(tl_duration.text, tl_frequency.text,filechooser.path) if timelapse.state == "down" else ""
                        
                        pass
                        

                
